import React from "react";
import ContentAnchorsList from "./ContentAnchorsList";
import MoneyIcon from "../../Icons/MoneyIcon.svg";
import PhysicsIcon from "../../Icons/PhysicsIcon.svg";
import Photo1 from "./Photos/cpuPhoto1.svg";
import Photo2 from "./Photos/cpuPhoto2.svg";
import Photo3 from "./Photos/cpuPhoto3.svg";
import Photo4 from "./Photos/cpuPhoto4.svg";

const CPU = () => {
  return (
    <div>
      <h1 className="sloganAndAccesoireName">Центральный процессор</h1>
      <ContentAnchorsList />

      <h2 className="contentParagraph" id="cpuDescription">
        Описание
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Процессор – тонкая прямоугольная пластина из кремния, окружённая
        корпусом из пластмассы и/или керамики, на который прикреплена
        теплораспределительная крышка.
      </p>
      <p>
        На текущий момент на рынке конкурируют две
        фирмы-производителя процессоров – AMD и Intel. Об их решениях и пойдёт
        речь в статье.
      </p>

      <h2 className="contentParagraph" id="cpuStepping">
        Степпинг процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Ревизия процессора характеризуется степпингом. Если Вы выбирали
        материнскую плату, которая новее чем выбранный процессор, то они могут
        не иметь совместимости со старта из-за версии ПО BIOS, установленной на
        материнской плате.
      </p>
      <p>
          Дату выхода процессора с выбранным степпингом, которую Вы найдёте введя в любую поисковую
          строку код производителя или номер партии (располагаются на странице в интернет-магазине), Вы должны сравнить с датой выхода материнской платы.
      </p>
      <p>
        Если процессор вашего степпинга появился раньше выхода
        материнской платы – учтите, что Вы рискуете получить неработающий с
        момента сборки ПК. Способы обновить BIOS без включения ПК описаны здесь.
      </p>

      <h2 className="contentParagraph" id="cpuSocket">
        Сокет процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Если сокет процессора не будет соответствовать сокету материнской платы,
        Вы физически не сможете подключить эти комплектующие. У нескольких
        поколений процессоров сокеты могут совпадать.
      </p>

      <div className="extraInformation">
        <p className="extraInformationHeader">
          Сокет процессора
        </p>
        <p>
          <img src={PhysicsIcon} width="20" height="20" />
          Сокетом процессора называется расположение и количество текстолитовых
          коннекторов на дне процессора.
        </p>
      </div>

      <h2 className="contentParagraph" id="cpuCores">
        Ядра процессора
      </h2>
      <p>
        Для самых простых компьютеров, для работы в офисе, просмотра мультимедиа
        подойдут 2-ух ядерные процессора.
      </p>
      <p>
        Для офиса или не очень тяжёлой игровой или слабой профессиональной
        нагрузки подойдут 4 ядра.
      </p>
      <p>
        Для игр и профессиональный задач разной сложности подойдут 6 и более
        ядер.
      </p>
      <p>
        Важно понимать, что существуют программы и игры, которые будут работать
        лучше на процессорах с меньшим количеством ядер, а порой даже и меньшей
        частотой.
      </p>
      <p>
        Существуют технологии виртуализации ядер. У Intel это
        Hyper-Threading, а у AMD – SMT. Эта технология “клонирует” каждое
        физическое ядро, поэтому, количество потоков процессора не всегда
        равняется количеству ядер.
      </p>

      <div className="extraInformation">
        <p className="extraInformationHeader">
          Ядро процессора
        </p>
        <p>
          <img src={PhysicsIcon} width="20" height="20" />
          Ядро процессора осуществляет выполнение одного потока команд.
          Многоядерные процессоры имеют несколько ядер и поэтому способны
          одновременно выполнять несколько потоков команд.
        </p>
      </div>


      <h2 className="contentParagraph" id="cpuFrequency">
        Частота процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Тактовая частота процессора записывается следующим образом: 3200 GHZ
        (гигагерц) = 3 200 000 000 000 тактов/сек.
      </p>
      <p>
        При выборе процессора важно понимать, что процессор с большей частотой
        будет всегда работать быстрее только в рамках одной линейки процессоров
        из-за особенностей применяемых технологий.
      </p>

      <div className="extraInformation">
        <p className="extraInformationHeader">
          Тактовая частота процессора
        </p>
        <p>
          <img src={PhysicsIcon} width="20" height="20" />
          Тактовая частота процессора - показатель количества операций, которые он
          может выполнять за 1 секунду.
        </p>
      </div>

      <h2 className="contentParagraph" id="cpuCache">
        Кеш процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Кеш процессора записывается следующим образом: 6 Mb (мегабайт)
      </p>
      <p>
        Также, как и частота, больший объём кэша различных уровней памяти (L1,
        L2, L3) означает большую производительность только в рамках одной
        линейки процессоров.
      </p>
      <p>
        Об объёме кэшей стоит задумываться только если Вы собираете компьютер
        для игр или профессиональных задач. В этих случаях вам потребуется от 6
        мегабайт кэша L3.
      </p>

      <h2 className="contentParagraph" id="cpuGraphicCore">
        Встроенное графическое ядро
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Некоторые процессоры продаются вместе со встроенным в них графическим
        ядром, которое исполняет функции видеокарты.
      </p>
      <p>
        Такие ядра существенно слабее дискретных (покупаемых отдельно)
        видеокарт. Не рекомендуется рассчитывать на встроенную видеокарту если
        ваши запросы превышают сложность офисных программ.
      </p>

      <h2 className="contentParagraph" id="cpuBitDepth">
        Разрядность процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Если Вы собираете офисный ПК на процессоре с двумя или одним ядром и
        объёмом оперативной памяти не более 4 ГБ – разницы от различной
        разрядности процессора Вы не заметите.
      </p>
      <p>
        При сборке профессиональных или игровых ПК всегда отдавайте предпочтение
        64-ёх битным процессорам.
      </p>

      <div className="extraInformation">
        <p className="extraInformationHeader">
          Разрядность процессора
        </p>
        <p>
          <img src={PhysicsIcon} width="20" height="20" />
          Разрядность процессора – показатель количества бит, которые процессор
          обработает за один такт.
        </p>
      </div>

      <h2 className="contentParagraph" id="cpuTDP">
        TDP процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        TDP процессора – его конструктивные требования по теплоотводу.
        Записывается характеристика следующим образом: 90 W (Ватт).
      </p>
      <p>
        TDP процессора всегда должен быть ниже или равен TDP системы охлаждения
        для избежания перегрева. Информация об обоих характеристиках содержится
        в спецификациях соответствующих комплектующих.
      </p>
      <p>
        Настоятельно не рекомендуется подбирать системы охлаждения процессоров
        по TDP, если они будут эксплуатироваться не на базовых частотах. На
        практике процессоры даже в режиме автоматического разгона потребляют
        гораздо больше заявленного TDP.
      </p>
      <p>
        При желании разгонять процессор, лучше всего опираться на тесты выбранного процессора при нагрузке.
      </p>
      <p>
        Однако и производитель системы охлаждения может подвести вас, указывая
        характеристики, полученные сомнительным образом и не имеющими ничего
        общего с реальностью.
      </p>
      <p>
        Поэтому самый верный метод – смотреть тесты комбинаций процессоров и
        систем охлаждения. Если найти идентичный вашей связке тест не удалось –
        ищите тесты с процессором с TDP, близким к выбранному процессору.
      </p>

      <h2 className="contentParagraph" id="cpuBoost">
        Поддержка разгона процессора
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Для разгона процессора ваша материнская плата, как и сам процессор,
        должны поддерживать разгон. В характеристиках обоих комплектующих наличие поддержки разгона
        указывается всегда. У материнских плат этот критерий – чипсет, а у
        процессоров – разблокированный множитель тактовой частоты.
      </p>

      <h2 className="contentParagraph" id="cpuTurboCoreAndTurboBoost">
        Turbo Core и Turbo Boost
      </h2>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        Технологии Turbo Core и Turbo Boost – набор настроек процессоров AMD и
        Intel соответственно, которые можно включить на любых материнских
        платах. Эти настройки являются своеобразным автоматическим разгоном.
      </p>
      <p>
        Однако с настоящим разгоном эти технологии не сравнятся. В общем случае
        они работают так: в рамках заявленного TDP процессора, частота его
        отдельных ядер поднимается до значения, не превышающего указанное
        производителем.
      </p>
      <p>
        Соответственно, если процессор упирается в свой лимит по
        энергопотреблению – TDP, то он перестанет повышать частоты ядер.
        Максимальные частоты, указываемые производителями, на практике, в пределах
        TDP никогда не достигаются.
      </p>
      <p>
        Более того, ваш процессор будет гарантированно потреблять энергию по
        заявленному TDP только на базовой частоте. Но тут важно понимать, что на
        материнских платах с хорошей VRM базой возможно наличие технологий,
        позволяющих превышать заявленный TDP процессора.
      </p>
      <p>
        Эти технологию позволяют вручную выставить предел по
        энергопотреблению процессора. Это позволит ему потреблять гораздо больше
        TDP ограниченное количество времени.
      </p>
      <p>
        В этом случае процессор будет ускоряться уже под новый предел TDP и
        иногда даже превышать заявленные частоты Turbo Core или Turbo Boost.
      </p>

      <h2 className="contentParagraph" id="cpuHowWorks">
        <img src={PhysicsIcon} width="20" height="20" />Как работает процессор
      </h2>

      <h3 className="contentParagraphTopics">
        База любого процессора: архитектура набора команд
      </h3>
      <p>
        Именно от архитектуры зависит то,
        как все элементы процессора взаимодействуют друг с другом. Существует огромное
        количество архитектур, но самыми распространенными являются x86, x64
        (преимущественно в стационарных компьютерах и ноутбуках) и ARM (в
        мобильных устройствах и встроенных системах).
      </p>
      <p>
        Архитектура отвечает за то, какие инструкции процессор может
        обрабатывать, его взаимодействие с памятью и кэшем, распределение задач
        по нескольким этапам обработки и другое.
      </p>
      <p>
        В этой статье элементы процессора будут рассматриваться в том порядке,
        по которому выполняются команды. Различные типы инструкций обобщены для краткости.
      </p>

      <h3 className="contentParagraphTopics">
        Блок управления и исполнительный тракт
      </h3>
      <p>
        Элементы процессора можно разделить на два основных: управляющий автомат
        и операционный автомат. Процессор - устройство, в котором
        управляющий автомат управляет различными элементами операционного
        автомата.
      </p>
      <p>
        Операционный автомат - путь, по которому данные передаются при их
        обработке. Он получает входные данные, обрабатывает их и отправляет в
        нужное место после завершения операции. Управляющий автомат направляет
        этот поток данных.
      </p>
      <p>
        В зависимости от инструкции, операционный автомат направляет сигналы к
        различным компонентам процессора (такие, как отслеживание состояние
        процессора или включение/отключение определённых элементов).
      </p>
      <p>
        <img src={Photo1} className="cpuPhoto1" />
      </p>
      <p>
        Схема работы базового процессора. Белыми линиями отображен поток данных,
        а красными - поток команд.
      </p>

      <h3 className="contentParagraphTopics">Цикл команд – Выборка</h3>
      <p>
        Изначальная задача процессора - определить, какие команды необходимо
        выполнить следующими, а затем переместить их из памяти в блок
        управления. Команды создаются компилятором и зависят от набора ISA - части архитектуры компьютера, определяющей программируемую
        часть ядра микропроцессора.
      </p>
      <p>
        Наиболее распространенные типы базовых инструкций (например, "загрузка",
        "сложение", "вычитание" и другие) общие для всех ISA, но существует
        множество дополнительных, специальных типов команд, уникальных для
        конкретной архитектуры набора. В Блок Управления заложено, какие сигналы
        и куда нужно направить для выполнения определенного типа команды.
      </p>
      <p>
        Например, при запуске exe-файла в Windows, код этой программы
        отправляется в память и процессор получает адрес, с которого начинается
        первая команда.
      </p>
      <p>
        Процессор всегда обновляет счётчик команд (реестр), отслеживающий откуда
        должна будет выполняться следующая команда.
      </p>
      <p>
        После определения точки, с которой нужно начинать цикл процессор
        перемещает команды из памяти в вышеупомянутый реестр - этот процесс
        называется выборкой команды.
      </p>

      <h3 className="contentParagraphTopics">
        Цикл выполнения команд – Декодирование
      </h3>
      <p>
        Определение процессором типа команды называется декодированием. Каждая
        команда обладает особым набором битов - опкодом, который дает
        возможность процессору распознать ее тип.
      </p>
      <p>
        Сложность декодирования может зависеть от того, насколько продвинутой
        является архитектура набора команд процессора. У архитектуры RISC-V, к
        примеру, несколько десятков команд, а у x86 - несколько тысяч. У
        процессоров Intel x86 процесс декодирования является одним из сложнейших
        и занимает огромное количество памяти.
      </p>

      <h3 className="contentParagraphTopics">Регистры</h3>
      <p>
        Регистрами называются крайне быстрые фрагменты памяти процессора. У
        64-битных процессоров каждый из них вмещает 64 бита, а всего их может
        быть несколько десятков на одно ядро. Регистры используются для хранения
        используемых в данный момент значений.
      </p>
      <p>
        Простые команды, занимающие очень маленькое пространство выполняются в
        регистре.
      </p>

      <h3 className="contentParagraphTopics">
        Арифметико-логическое устройство
      </h3>
      <p>
        Самыми простыми для понимания являются арифметические команды. Эти
        команды отправляются в АЛУ (арифметико-логическое устройство) для
        последующей обработки. Устройство представляет собой цепь, которая чаще
        всего работает с двумя значениями (сигналами) и выдает результат.
      </p>

      <h3 className="contentParagraphTopics">Схема работы АЛУ</h3>
      <p>
        Арифметико-логическое устройство работает схоже с калькулятором. Тип
        операции зависит от опкода команды, который управляющий автомат
        отправляет в АЛУ и который в дополнение к базовой арифметике может
        производить со значениями такие битовые операции, как AND, OR, NOT и
        XOR.
      </p>
      <p>
        Также, арифметико-логическое устройство выводит информацию о проведенном
        вычислении для управляющего автомата (оказалось ли оно положительным,
        отрицательным, равным нулю или вызвало переполнение).
      </p>
      <p>
        Несмотря на то, что арифметико-логическое устройство чаще всего связано
        именно с арифметическими операциями, оно находит свое применение и в
        инструкциях памяти или перехода.
      </p>
      <p>
        Например, если процессору нужно вычислить адрес памяти, заданный в
        результате прошлого вычисления, либо в случае необходимости вычислить
        переход для добавления в счетчик программ, если инструкция того требует
        (например: "если предыдущий результат отрицателен, пропустить 5
        следующих команд").
      </p>
      <p>
        <img src={Photo2} className="cpuPhoto2" />
      </p>

      <h3 className="contentParagraphTopics">Команды и иерархия памяти</h3>
      <p>
        Для понимания принципа работы команд, связанных с памятью, стоит
        обратить внимание на иерархию памяти - связь между кэшем, оперативной
        памятью и главным запоминающим устройством.
      </p>
      <p>
        Когда процессор работает с командой памяти, данных о которой у него еще
        нет в регистре, он будет продвигаться по иерархии памяти, пока не найдет
        нужную информацию. Большинство современных процессоров имеют три уровня
        кэша: первый, второй и третий. Сначала процессор проверит наличие
        необходимых команд в кэше первого уровня - самом маленьком в объёме и
        быстром из всех.
      </p>
      <p>
        Зачастую этот кэш разделен на две части: первая отведена под данные, а
        вторая - под команды. Команды извлекаются процессором из памяти так же,
        как и любые другие данные.
      </p>
      <p>
        Обычно, кэш первого уровня может состоит из нескольких сотен килобайт.
        Если процессор не найдет в нём то, что нужно, то перейдет к проверке
        кэша второго уровня (размером в несколько мегабайт), а затем - третьего
        (занимающего десятки мегабайт).
      </p>
      <p>
        В случае, если необходимых данных не будет и в кэше третьего уровня, то
        поиск будет производиться в оперативной памяти, а затем в накопителях. С
        каждым подобным "шагом", увеличивается не только объем доступных данных,
        но и задержка.
      </p>
      <p>
        После того, как процессор нашел необходимые данные, он отправляет их
        вверх по иерархии памяти для сокращения времени поиска, на случай, если
        они понадобятся в дальнейшем.
      </p>
      <p>
        Если задействованы память или накопители, то процессору может
        понадобятся десятки тысяч, а то и миллионы циклов. В зависимости от
        системы, у каждого ядра процессора может быть собственный кэш первого
        уровня, общий с другим ядром кэш второго уровня и кэш третьего уровня у
        группы из четырех или более ядер.
      </p>
      <p>
        <img src={Photo3} className="cpuPhoto3" />
      </p>

      <h3 className="contentParagraphTopics">
        Иерархия процессора: Команды перехода и ветвления
      </h3>
      <p>
        Команды современных программ постоянно переходят с одного потока
        процессов на другой, а это значит, что процессор крайне редко выполняет
        более дюжины смежных команд без перехода. Команды ветвления происходят
        от элементов программирования, таких как IF, FOR и RETURN.
      </p>
      <p>
        Они используются для прерывания выполнения программы или переключения на
        другую часть кода. Кроме команд ветвления существуют и команды перехода,
        которые отличаются от первых тем, что они всегда участвуют в процессе
        выполнения программы.
      </p>
      <p>
        Кроме обычных команд перехода, существуют и условные переходы, с
        которыми процессору работать особенно сложно, поскольку он может
        выполнять несколько инструкций одновременно и конечный результат всей
        ветки нельзя определить пока не начата работа над выполнением связанных
        команд.
      </p>
      <p>
        Каждый шаг в выполнении какой-либо команды может занимать несколько
        циклов, а это значит, что арифметико-логическое устройство может
        простаивать без дела пока происходит выборка команды.
      </p>
      <p>
        Чтобы максимизировать эффективность вычислительной мощности процессора,
        каждая стадия разделяется на несколько частей - в процессе, который
        называется вычислительным конвейером (конвейерной обработкой). По сути,
        процессор проверяет на возможность параллельного задействования
        наибольшего числа его элементов одновременно.
      </p>
      <p>
        Процессоры используют тот же принцип для повышения пропускной
        способности команд. Конвейеры современных процессоров на архитектуре ARM
        или x86 могут использовать свыше 20 стадий вычислительного конвейера, а
        это значит, что ядро процессора одновременно обрабатывает свыше 20
        различных команд. Процессоры могут отличаться по разделению этих стадий
        под различные нужды.
      </p>
      <h3 className="contentParagraphTopics">Внеочередное исполнение</h3>
      <p>
        Практически все современные модели ЦП фактически исполняют команды не в
        порядке их получения. Существует такая функция, как внеочередное
        исполнение, призванная сократить время простоя процессора во время
        ожидания завершения остальных команд.
      </p>
      <p>
        Если процессор понимает, что следующей команде необходимы данные, для
        поиска которых понадобится больше времени, он может изменить порядок
        команд, начав работу над не связанной командой, пока происходит поиск.
        Внеочередное исполнение команд - необычайно полезная, но далеко не
        единственная вспомогательная функция процессора.
      </p>
      <p>
        <img src={Photo4} className="cpuPhoto4" />
      </p>
      <p>Схема внеочередной и очередной работы</p>
      <p>
        Еще одной крайне полезной особенностью процессора является предвыборка.
        Если засечь время, необходимое для выполнения случайной инструкции от
        начала и до конца, то можно обнаружить, что большую часть времени
        занимает доступ к памяти.
      </p>
      <p>
        Блок предварительной выборки - элемент в ЦП, который рассматривает
        команды, находящиеся в очереди, и определяет, какие данные им
        потребуются. Если он замечает, что для операции нужны данные, которые
        еще не находятся в кэше процессора, то он извлечет их из оперативной
        памяти в кэш. Отсюда и его название.
      </p>
      <h3 className="contentParagraphTopics">Процессорные ускорители</h3>
      <p>
        Ускорители для конкретных задач – крайне полезная часть
        процессора. Эти ускорители представляют собой небольшие схемы, главная
        цель которых - как можно быстрее выполнить определенную задачу. Этой
        задачей может быть шифрование, кодирование данных или машинное обучение.
      </p>
      <p>
        Процессор может выполнять эти команды самостоятельно, но созданный
        конкретно для этой цели блок будет намного более эффективен. Наглядным
        показателем мощностей ускорителей будет сравнение встроенного
        графического процессора с дискретной видеокартой.
      </p>
      <p>
        Разумеется, процессор может выполнять вычисления, необходимые для
        обработки графики, но наличие отдельного блока обеспечивает намного
        более высокую производительность. С ростом числа ускорителей фактическое
        ядро центрального процессора может занимать всего лишь небольшую часть
        чипа.
      </p>

      <h3 className="contentParagraphTopics">Многоядерность</h3>
      <p>
        Многоядерность процессоров крайне важна. Важно понимать, что несколько
        ядер одного процессора – не объединение нескольких копий одного ядра,
        ведь однопоточную программу невозможно превратить в многопоточную.
        Проблема возникает из-за зависимости ядер.
      </p>
      <p>
        В случае с двумя ядрами процессору необходимо отправлять команды в 2
        раза быстрее. Также нужно два раздельных интерфейса для памяти. Именно
        из-за наличия нескольких ядер на одном чипе, потенциально работающих с
        одними и теми же частями данных, возникает проблема слаженности и
        согласованности их работы.
      </p>
      <p>
        Если два ядра обрабатывали команду, использующую одни и те же данные, то
        как процессор определяет, у которого из них правильное значение? А что,
        если одно ядро модифицировало данные, но они не успели вовремя дойти до
        второго ядра?
      </p>
      <p>
        Поскольку у них есть отдельные кэши, в которых могут храниться
        пересекающиеся данные, для устранения возможных конфликтов необходимо
        использовать сложные алгоритмы и контроллеры.
      </p>
      <p>
        Как правило, отдельные ядра обрабатывают команды из разных потоков, тем
        самым снижая зависимость между ядрами. Поэтому, открыв диспетчер задач,
        Вы часто видите, что загружено лишь одно ядро процессора, а другие едва
        работают - многие программы попросту изначально не предназначены для
        многопоточности. Нередко какая-либо задача будет выполняться с
        использованием как наименьшего числа ядер.
      </p>

      <h2 className="contentParagraph" id="cpuSelectionAlgorithm">
        Алгоритм выбора процессора
      </h2>
      <h3 className="contentParagraphTopics">Если разгон не планируется</h3>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        1. Отсортируйте поиск по выбранному числу ядер и потоков, по
        наличию графического ядра, разрядности и объёму кэшей. Выберете сокет в
        соответствии с пожеланиями при выборе материнской платы.
      </p>
      <p>
        2. Проверьте степпинг процессора на совместимость с материнской платой и
        учтите риски и свои возможности, если совместимости нет.
      </p>
      <p>
        3. Даже если поддержки разгона нет, учтите возможности технологий Turbo
        Core и Turbo Boost.
      </p>
      <p>
        4. Учитывайте TDP процессора – от него зависят ваши траты на систему
        охлаждения.
      </p>
      <p>
        5. Найдите в сети тесты выбранного процессора в желаемых задачах для
        того чтобы гарантированно не разочароваться в покупке.
      </p>

      <h3 className="contentParagraphTopics">Если разгон планируется</h3>
      <p>
        <img src={MoneyIcon} width="20" height="20" />
        1. Отсортируйте ваш поиск по выбранному числу ядер и потоков, а также по
        наличию графического ядра, разрядности и объёму кэшей. Выберете сокет в
        соответствии с пожеланиями при выборе материнской платы.
      </p>
      <p>
        2. Проверьте степпинг процессора на совместимость с материнской платой и
        учтите риски и свои возможности, если совместимости нет.
      </p>
      <p>
        3. Проверьте наличие поддержки разгона самого процессора и материнской
        платы.
      </p>
      <p>4. Выбирайте систему охлаждения исключительно по тестам из сети.</p>
      <p>
        5. Найдите в сети тесты выбранного процессора в желаемых задачах для
        того чтобы гарантированно не разочароваться в покупке.
      </p>
    </div>
  );
};

export default CPU;
